<script src="http://d3js.org/d3.v3.min.js"></script>
<br>

<div class="row">  
    <h2 style="text-align: center ">Your Diary</h2>
    <hr>
</div>

<div class="row">      
  <h3 style="text-align: center ">Daily Reports</h3>
    <div class="graph-wrapper">
      <span class="report-graph" id="line-graph"></span>
    </div>
</div>     
<hr>
<div class="row">      
  <h3 style="text-align: center ">Your Mood</h3>
    <div class="graph-wrapper">
      <span class="report-graph" id="mood-graph"></span>
    </div> 
    <div class="graph-wrapper">
      <span class="report-graph" id="mood-graph2"></span>
    </div> 
</div> 
<hr>
<div class="row col-md-2 col-md-offset-2">
    <%= link_to "Export your Diary","/views/reports/export.html.erb" ,{:class=> "btn btn-success "}%>
</div>

<%= content_tag :div, :hidden, class: "hide",  id: "entries", data: {entries: Report.last(7)} %>


<%= content_tag :div, :hidden, class: "hide", id: "date_labels", data: {date_labels: Report.last(7).sort_by { |x| x.created_at }.map {|x| x.created_at.strftime('%b %d')}} %>


<script type="text/javascript">

				
  var dataset = $(entries).data()["entries"];
  //show weight
  var weightraw = dataset.map(function(dp){return dp.weight});
  var weight_max = Math.max.apply(Math, weightraw);
  var weight_min = Math.min.apply(Math, weightraw);
  var weight_upper = weight_max+20;
  var weight_lower = Math.max(0,(weight_min-20));
  var weight_medium = (weight_upper+weight_lower)/2;
  var weight_divisor = (weight_upper-weight_lower)/10;
  var weight = weightraw;
  
  for(var i = 0, length = weightraw.length; i < length; i++){
    weight[i] = 5+(weightraw[i]-weight_medium)/weight_divisor;
	}
  
  var dates = $(date_labels).data()["dateLabels"]

  var comments = dataset.map(function(dp){return dp.comments;});
  var sleep = dataset.map(function(dp){return dp.sleep;});
  var energy = dataset.map(function(dp){return dp.energy;});
  var stress = dataset.map(function(dp){return dp.stress;});
  var excercise = dataset.map(function(dp) {return dp.excercise;});
      /*if (dp.excercise == "Yes") {
        return 1;
      } else {
      return 0;
      }
      });*/
  
  // margins
  var margin = {top: 20, right: 30, bottom: 122, left: 40};
  var w = 300 - margin.left - margin.right;
  var h = 330 - margin.top - margin.bottom;

  //Width and height
  var barPadding = 0;
  
  var line_ids = ["sleep", "energy", "stress", "weight"]
  var names = ["Hours of Sleep","Energy Level","Stress Level", "Weight (lbs.)", "Exercise"]
  var colors = ["#009999", "#1240AB", "#FFAA00", "#FF7400", "#DFF7FE"]
  
  //Create SVG element
  var svg = d3.select("#line-graph")
    .append("svg")
    .attr("width", w + margin.left + margin.right)
    .attr("height", h + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");        

  var x = d3.scale.linear()
                  .range([0, w])
                  .domain([0, 7])
                  .nice();

  var y = d3.scale.linear()
                  .range([h, 0])
                  .domain([0,10])
                  .nice();


  var y_weight = d3.scale.linear()
                  .range([h, 0])
                  .domain([weight_lower,weight_upper]);
                  //.nice()

  var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom")
                    .ticks(6)
                    .tickPadding(w/14)
                    .tickValues([0,1,2,3,4,5,6])
                    .tickFormat(function(d, i){ return dates[i]}); 

  var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left"); 

 var weightAxis = d3.svg.axis()
                    .scale(y_weight)
                    .orient("right"); 
                                                           

  var line = d3.svg.line()
                    .x(function(d,i) { return x(i); })
                    .y(function(d) { return y(d); })
                    .interpolate("monotone");

  svg.selectAll("rect")
       .data(excercise)
       .enter()
       .append("rect")
       .attr("x", function(d, i) {
          return  i * (w / dataset  .length);
       })
       .attr("y", function(d) {
          return 0;
       })
       .attr("width", w / dataset.length - barPadding)
       .attr("height", h)
       .style("fill", function(d) {
          if (d==1||String(d).valueOf() == new String("Yes").valueOf()) {
            return "rgba(51,204,255,.15)"
          } else {
            return "rgba(255,255,255,.15)"
          }
       });

  function addLine(data, color, name) {
    svg.append("svg:path")
      .attr("class", "line")
      .attr("id", name)
      .attr("d", line(data))
      .style("stroke-width", 2)
      .style("stroke", color)
      .style("fill", "none")
      .attr("transform", "translate(" + w/14 + ",0)");
    }
      
  function addCommentCircles(data, color) {
    svg.selectAll("circle")
      .data(data)
      .enter()
      .append("circle")
      .attr("id", function(d,i) { return "comment_" + i})
      .attr("cx", function(d,i) { return x(i)+ w/14 + 3; })
      .attr("cy", function(d)   { return y(0);       })
      .attr("r", 5)
      .attr("comment_on", 0)
      .style("fill", function(d) {  if(d!=null) {
                                      return color;
                                    } else {
                                      return 'none';}
      })
      .on("click", function(d) {
        if ($(this).attr("comment_on")==0) {
          $(this).attr("comment_on", 1)

          div.transition()        
                  .duration(200)      
                  .style("opacity", .95);      
              div .html(d)  
                  .style("left", (d3.event.pageX)-50 + "px")     
                  .style("top", (d3.event.pageY - 40) + "px");
        } else {
          $(this).attr("comment_on", 0)
          div.transition()        
                  .duration(200)      
                  .style("opacity", 0);
        }    
      });      

// 
// .on("mouseover", function(d) {      
//             div.transition()        
//                 .duration(200)      
//                 .style("opacity", .9);      
//             div .html(formatTime(d.date) + "<br/>"  + d.close)  
//                 .style("left", (d3.event.pageX) + "px")     
//                 .style("top", (d3.event.pageY - 28) + "px");    
//             })                  
//         .on("mouseout", function(d) {       
//             div.transition()        
//                 .duration(500)      
//                 .style("opacity", 0);   
//         });
// 



  };

  addLine(sleep, colors[0], line_ids[0]);
  addLine(energy, colors[1], line_ids[1]);
  addLine(stress, colors[2], line_ids[2]);
  addLine(weight, colors[3], line_ids[3]);
  

  //Add a legend 
  var legend = svg.append("g")
    .attr("class", "legend")
    .attr("x", 0)
    .attr("y", 0)
    .attr("height", 150)
    .attr("width", 100);

  // Add axes
  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis)
    .selectAll("text")  
    .style("text-anchor", "end")
    .attr("dx", "-.15em")
    .attr("dy", ".15em")
    .attr("transform", function(d) {
        return "rotate(-75)" 
        });

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);   

  svg.append("g")
      .attr("class", "weightaxis")
      .style("fill", "#FF7400")
      .attr("transform", "translate(" + w + ",0)")
      .call(weightAxis);  
 
legend.selectAll('g').data(names)
      .enter()
      .append('g')
      .attr("class", "legend")
      .each(function(d, i) {
        var g = d3.select(this);
        g.append("rect")
          .attr("x", 2 + i*80 - 80*(i%2) -320*Math.floor(i/4) )
          .attr("y", h + 60 + 22*(i%2) + 44*Math.floor(i/4))
          .attr("width", 16)
          .attr("height", 16)
          .style("fill", colors[i])
          .style("stroke", "#000")
          .style("stroke-width", 1);
        
        g.append("text")
          .attr("x", 20 + i*80 - 80*(i%2) -320*Math.floor(i/4))
          .attr("y", h + 73 + 22*(i%2)+ 44*Math.floor(i/4))
          .attr("height",30)
          .attr("width",100)
          .text(function(d) {return d});
        
        g.on("click", function() {
                              if(i==4) { 
                                return 
                                } else {
                              $('#'+line_ids[i]+'.line').toggle();
                              
                              if($(this).css('opacity') == 1){
                                $(this).animate({opacity:0.5}, 100);
                              } else{
                                $(this).animate({opacity:1}, 100);
                              }

                              }});
      });

      addCommentCircles(comments, "#D11919")

    var div = d3.select("body").append("div")   
    .attr("class", "tooltip")               
    .style("opacity", 0);


// data for mood 

  var h = h/2;
  
  var dataMood =[];
  var mood = [];
  var moods = [];
  var moodscount ={};
  <% for report in @reports -%>
  moods.push("<%= report.mood %>");
  <% end -%>
  moods.map( function (a) { if (a in moodscount) moodscount[a] ++; else moodscount[a] = 1; } );
  $.each(moodscount, function(key, value) {
      dataMood.push((value*100)/7);
      mood.push(key);
  });

//   var colorMood = d3.scale.linear()
//   					.domain([0, dataMood.length])
//   					.range(["#ff759f", "#ff9175"]);
  					
//   var x2 = d3.scale.linear()
//                   .range([0, w])
//                   .domain([0, dataMood.length])
//                   .nice();

//   var y2 = d3.scale.linear()
//                   .range([0, h])
//                   .domain([100,0])
//                   .nice();


//   var xAxis2 = d3.svg.axis()
//                     .scale(x2)
//                     .orient("bottom")
//                     .ticks(dataMood.length)
//                     //.tickValues([0, 1, 2, 3])
//                     .tickFormat(function(d) {return mood[d];});
                    
                    
//   var yAxis2 = d3.svg.axis()
//                     .scale(y2)
//                     .orient("left")
//                     .ticks(5)
//                     .tickFormat(function(d) {return d + "%"});
  			    
//   var svg2 = d3.select("#mood-graph")
//     .append("svg")
//     .attr("width", w + margin.left + margin.right)
//     .attr("height", h + margin.top + margin.bottom)
//     .append("g")
//     .attr("transform", "translate(" + margin.left*1.5 + "," + margin.top + ")");

// //append bar     
//   var bars = svg2.selectAll("rect")
//           .data(dataMood)
//           .enter()
//           .append("rect")
//           .attr("height", function(d) {return d*h/100;})
//           .attr("width", w / dataMood.length /2 )
//           .attr("fill", function(d, i) {return colorMood(i)})
//           .attr("x", function(d, i) { return w / dataMood.length/4 + i * w / dataMood.length })
//           .attr("y", function(d) { return h-d*h/100 });

// //append axes  			 	
//   svg2.append("g")
//   		.attr("class", "x axis")
//       .attr("transform", "translate(0," + h + ")")
//   		.call(xAxis2)
//   		.selectAll("text") 
//       .style("text-anchor", "end")
//       .attr("dx", "-.15em")
//       .attr("dy", "1.5em")
//       .attr("transform", function(d) {
//         return "rotate(-75)" 
//       });                    
//   		// .attr("transform", "translate(" + w/4/dataMood.length + " ,0)");
  	   
//   svg2.append("g")
//       .attr("class", "y axis")
//       .call(yAxis2);
  

// ///////////////////////////
  

var mood_numdata =[];
var mood_keys = [];
for(var key in moodscount) {
    var value = moodscount[key];
    mood_numdata.push(value);
    mood_keys.push(key);
};

var width = 300;
var height = 300;
var radius = 150;

var color = d3.scale.category20();

var pie = d3.layout.pie()
    .sort(null);

var piedata = pie(mood_numdata);

var arc = d3.svg.arc()
    .innerRadius(radius - 110)
    .outerRadius(radius - 80);

var svg = d3.select("#mood-graph")
    .append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + (width / 2 +10)+ "," + height / 2 + ")");

var path = svg.selectAll("path")
    .data(piedata)
    .enter().append("path")
    .attr("fill", function(d, i) { return color(i); })
    .attr("d", arc);

svg.selectAll("text").data(piedata)
    .enter()
    .append("text")
    .attr("text-anchor", "middle")
    .attr("x", function(d) {
        var a = d.startAngle + (d.endAngle - d.startAngle)/2 - Math.PI/2;
        d.cx = Math.cos(a) * (radius - 95);
        return d.x = Math.cos(a) * (radius - 40);
    })
    .attr("y", function(d) {
        var a = d.startAngle + (d.endAngle - d.startAngle)/2 - Math.PI/2;
        d.cy = Math.sin(a) * (radius - 95);
        return d.y = Math.sin(a) * (radius - 40);
    })
    .text(function(d,i) { return mood_keys[i]; })
    .each(function(d) {
        var bbox = this.getBBox();
        d.sx = d.x - bbox.width/2 - 2;
        d.ox = d.x + bbox.width/2 + 2;
        if (d.y < 0) {
          d.sy = d.oy = d.y + 5;
        } else {
          d.sy = d.oy = d.y - 15;
        }
    });

svg.append("defs").append("marker")
    .attr("id", "circ")
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("refX", 3)
    .attr("refY", 3)
    .append("circle")
    .attr("cx", 3)
    .attr("cy", 3)
    .attr("r", 3);

svg.selectAll("path.pointer").data(piedata).enter()
    .append("path")
    .attr("class", "pointer")
    .style("fill", "none")
    .style("stroke", "black")
    .attr("marker-end", "url(#circ)")
    .attr("d", function(d) {
        if(d.cx > d.ox) {
            return "M" + d.sx + "," + d.sy + "L" + d.ox + "," + d.oy + " " + d.cx + "," + d.cy;
        } else {
            return "M" + d.ox + "," + d.oy + "L" + d.sx + "," + d.sy + " " + d.cx + "," + d.cy;
        }
    });
/////////////////////////////



</script>

<style>

.legend text, 
.axis text {
  font: 12px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.weightaxis path,
.weightaxis line {
	fill: none;
	stroke: #FF7400;
	shape-rendering: crispEdges;
}
.weightaxis text {
  font: 11px sans-serif;
}
.grayedOut {
  opacity: 0.5;
}

div.tooltip {   
  position: absolute;           
  text-align: center;           
  width: 100px;                  
  height: 32px;                 
  padding: 2px;             
  font: 12px sans-serif;        
  background: lightsteelblue;   
  border: 0px;      
  border-radius: 8px;           
  pointer-events: none;         
}

</style>