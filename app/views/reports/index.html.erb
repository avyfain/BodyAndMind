<script src="http://d3js.org/d3.v3.min.js"></script>
<br>

<div class="row">
  <div class="well col-md-4 col-md-offset-4 well">
    <h2 style="text-align: center ">Your Diary</h2>
    <hr>
    
    <div class="graph-wrapper">
      <span class="report-graph" id="line-graph"></span>
    </div>
    
    <div class="graph-wrapper">
      <span class="report-graph" id="mood-graph"></span>
    </div> 

  </div>
</div>

<%= content_tag :div, :hidden, id: "entries", data: {entries: Report.order("created_at").last(limit=7).to_a.map{ |r| r.to_hash}.to_json } %>

<script type="text/javascript">
  var dataset = $(entries).data()["entries"];
  var sleep = dataset.map(function(dp){return dp.sleep;});
  var energy = dataset.map(function(dp){return dp.energy;});
  var stress = dataset.map(function(dp){return dp.stress;});
  
  // margins
  var margin = {top: 20, right: 40, bottom: 100, left: 30};
  var w = 350 - margin.left - margin.right;
  var h = 350 - margin.top - margin.bottom;

  //Width and height
  var barPadding = 0;
  
  var dataset = [0,1,0,1,0,1,0];
  
  //Create SVG element
  var svg = d3.select("#line-graph")
    .append("svg")
    .attr("width", w + margin.left + margin.right)
    .attr("height", h + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");        

  var x = d3.scale.linear()
                  .range([0, w])
                  .domain([0, 7])
                  .nice();

  var y = d3.scale.linear()
                  .range([h, 0])
                  .domain([0,10])
                  .nice();


  var y_weight = d3.scale.linear()
                  .range([h, 0])
                  .domain([100,300])
                  .nice();

  var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom")
                    .ticks(6)
                    .tickPadding(w/14)
                    .tickValues([0,1,2,3,4,5,6])
                    .tickFormat(function(d) {return "May " + (parseInt(d) +10)});

  var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left"); 

  var weightAxis = d3.svg.axis()
                    .scale(y_weight)
                    .orient("right");                                        

  var line = d3.svg.line()
                    .x(function(d,i) { return x(i); })
                    .y(function(d) { return y(d); })
                    .interpolate("monotone");

  svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", function(d, i) {
          return  i * (w / dataset  .length);
       })
       .attr("y", function(d) {
          return 0;
       })
       .attr("width", w / dataset.length - barPadding)
       .attr("height", h)
       .style("fill", function(d) {
          if (d==1) {
            return "rgba(255,0,0,.15)"
          } else {
            return "rgba(0,255,0,.15)"
          }
       });

  function addLine(data, color) {
    svg.append("svg:path")
      .attr("class", "line")
      .attr("d", line(data))
      .style("stroke-width", 2)
      .style("stroke", color)
      .style("fill", "none")
      .attr("transform", "translate(" + w/14 + ",0)"); 
    }
      
  // function addCircles(data, color) {
  //   svg.selectAll("circle")
  //     .data(data)
  //     .enter()
  //     .append("circle")
  //     .attr("cx", function(d,i) { return x(i)+ w/14; })
  //     .attr("cy", function(d)   { return y(d);       })
  //     .attr("r", 3)
  //     .style("fill", color);      
  // };

  var names = ["Hours of Sleep","Energy Level","Stress Level", "Weight (lbs.)"]
  var colors = ["#009999", "#1240AB", "#FFAA00", "#FF7400"]
  var weight = [3.0, 3.2, 3.5, 3.3, 3.4, 3.2, 3.0]
  addLine(sleep, colors[0]);
  addLine(energy, colors[1]);
  addLine(stress, colors[2]);
  addLine(weight, colors[3]);

  //Add a legend 
  var legend = svg.append("g")
    .attr("class", "legend")
    .attr("x", 0)
    .attr("y", 0)
    .attr("height", 100)
    .attr("width", 100);

  legend.selectAll('g').data(names)
      .enter()
      .append('g')
      .attr("class", "legend")
      .each(function(d, i) {
        var g = d3.select(this);
        g.append("rect")
          .attr("x", 25 + i*80 - 80*(i%2) )
          .attr("y", h + 60 + 18*(i%2))
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", colors[i]);
        
        g.append("text")
          .attr("x", 37 + i*80 - 80*(i%2))
          .attr("y", h + 70 + 18*(i%2))
          .attr("height",30)
          .attr("width",100)
          .text(function(d) {return d});
      });

  // Add axes
  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis)
    .selectAll("text")  
    .style("text-anchor", "end")
    .attr("dx", "-.15em")
    .attr("dy", ".15em")
    .attr("transform", function(d) {
        return "rotate(-75)" 
        });                    

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);   

  svg.append("g")
      .attr("class", "weight axis")
      .attr("transform", "translate(" + w + ",0)")
      .call(weightAxis);  
 
//dummy data for mood 
  var dataMood =[];
  var mood = [];
  var moods = [];
  var moodscount ={};
  <% for report in @reports -%>
  moods.push("<%= report.mood %>");
  <% end -%>
  moods.map( function (a) { if (a in moodscount) moodscount[a] ++; else moodscount[a] = 1; } );
  $.each(moodscount, function(key, value) {
      dataMood.push((value*100)/7);
      mood.push(key);
  });

  var colorMood = d3.scale.linear()
  					.domain([0, dataMood.length])
  					.range(["#ff759f", "#ff9175"]);
  					
  var x2 = d3.scale.linear()
                  .range([0, w])
                  .domain([0, dataMood.length])
                  .nice();

  var y2 = d3.scale.linear()
                  .range([0, h])
                  .domain([100,0])
                  .nice();


  var xAxis2 = d3.svg.axis()
                    .scale(x2)
                    .orient("bottom")
                    .ticks(dataMood.length)
                    //.tickValues([0, 1, 2, 3])
                    .tickFormat(function(d) {return mood[d];});
                    
                    
  var yAxis2 = d3.svg.axis()
                    .scale(y2)
                    .orient("left"); 
  			    
  var svg2 = d3.select("#mood-graph")
    .append("svg")
    .attr("width", w + margin.left + margin.right)
    .attr("height", h + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//append bar     
  var bars = svg2.selectAll("rect")
          .data(dataMood)
          .enter()
          .append("rect")
          .attr("height", function(d) {return d*h/100;})
          .attr("width", w / dataMood.length /2 )
          .attr("fill", function(d, i) {return colorMood(i)})
          .attr("x", function(d, i) { return w / dataMood.length/4 + i * w / dataMood.length })
          .attr("y", function(d) { return h-d*h/100 });

//append axes  			 	
  svg2.append("g")
  		.attr("class", "x axis")
      .attr("transform", "translate(0," + h + ")")
  		.call(xAxis2)
  		.selectAll("text") 
      .style("text-anchor", "end")
      .attr("dx", "-.15em")
      .attr("dy", "1.5em")
      .attr("transform", function(d) {
        return "rotate(-75)" 
      });                    
  		// .attr("transform", "translate(" + w/4/dataMood.length + " ,0)");
  	   
  svg2.append("g")
      .attr("class", "y axis")
      .call(yAxis2);
  

</script>

<style>

.legend text, 
.axis text {
  font: 12px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>